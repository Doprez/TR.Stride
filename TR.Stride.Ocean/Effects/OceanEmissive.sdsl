
namespace TR.Stride.Ocean
{
    shader OceanEmissive 
        : ComputeColor, OceanShadingCommon, MaterialPixelStream, NormalStream, PositionStream4, Transformation
    {
        float pow5(float f)
        {
            return f * f * f * f * f;
        }

        override float4 Compute()
        {
            // float4 derivatives = tex2D(_Derivatives_c0, IN.worldUV / LengthScale0);
            float4 derivatives = Derivatives_c0.SampleLevel(AnisotropicRepeatSampler, streams.worldUV / LengthScale0, 0);
            if (Lod == 0 || Lod == 1)
            {
                derivatives += Derivatives_c1.SampleLevel(AnisotropicRepeatSampler, streams.worldUV / LengthScale1, 0) * streams.lodScales.y;
            }
            if (Lod == 0)
            {
                derivatives += Derivatives_c2.SampleLevel(AnisotropicRepeatSampler, streams.worldUV / LengthScale2, 0) * streams.lodScales.z;
            }

            float2 slope = float2(derivatives.x / (1 + derivatives.z), derivatives.y / (1 + derivatives.w));
            float3 worldNormal = normalize(float3(-slope.x, 1, -slope.y));

            streams.meshNormalWS = streams.normalWS = worldNormal;

            float jacobian = 0;
            if (Lod == 0)
            {
                jacobian = 
                    Turbulence_c0.SampleLevel(AnisotropicRepeatSampler, streams.worldUV / LengthScale0, 0).x
                    + Turbulence_c1.SampleLevel(AnisotropicRepeatSampler, streams.worldUV / LengthScale1, 0).x
                    + Turbulence_c2.SampleLevel(AnisotropicRepeatSampler, streams.worldUV / LengthScale2, 0).x;
                jacobian = min(1, max(0, (-jacobian + FoamBiasLOD2) * FoamScale));
            }
            else if (Lod == 1)
            {
                jacobian = 
                    Turbulence_c0.SampleLevel(AnisotropicRepeatSampler, streams.worldUV / LengthScale0, 0).x
                    + Turbulence_c1.SampleLevel(AnisotropicRepeatSampler, streams.worldUV / LengthScale1, 0).x;
                jacobian = min(1, max(0, (-jacobian + FoamBiasLOD1) * FoamScale));
            }
            else
            {
                jacobian = Turbulence_c0.SampleLevel(AnisotropicRepeatSampler, streams.worldUV / LengthScale0, 0).x;
                jacobian = min(1, max(0, (-jacobian + FoamBiasLOD0) * FoamScale));
            }

            streams.matDiffuse = lerp(0, FoamColor, jacobian);
            streams.matDiffuse.a = 1.0f;

            float3 viewVector = Eye.xyz - streams.PositionWS.xyz;
            float distanceGloss = lerp(1 - Roughness, MaxGloss, 1 / (1 + length(viewVector) * RoughnessScale));
            streams.matGlossiness = lerp(distanceGloss, 0, jacobian);

            float3 viewDir = normalize(viewVector);

            float3 H = normalize(-streams.normalWS + -LightDirectionWS);
            float ViewDotH = pow5(saturate(dot(viewDir, -H))) * 30 * SSSStrength;
            float3 color = lerp(Color, saturate(Color + SSSColor.xyz * ViewDotH * streams.lodScales.w), streams.lodScales.z);

            float fresnel = dot(worldNormal, viewDir);
            fresnel = saturate(1 - fresnel);
            fresnel =  0.02f + 0.98f * pow5(fresnel);
            
            float3 emissive = lerp(color, 0, jacobian);
            //float3 emissive = lerp(color * (1 - fresnel), 0, jacobian);

            //emissive = fresnel.xxx;
            //streams.matDiffuse.xyz =  fresnel.xxx;

            //streams.matDiffuse.a = alpha;

            return float4(emissive, 1);
        }
    };
}