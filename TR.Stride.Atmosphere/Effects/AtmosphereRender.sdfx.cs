// <auto-generated>
// Do not edit this file yourself!
//
// This code was generated by Stride Shader Mixin Code Generator.
// To generate it yourself, please install Stride.VisualStudio.Package .vsix
// and re-save the associated .sdfx.
// </auto-generated>

using System;
using Stride.Core;
using Stride.Rendering;
using Stride.Graphics;
using Stride.Shaders;
using Stride.Core.Mathematics;
using Buffer = Stride.Graphics.Buffer;

[DataContract]public partial class AtmosphereParameters : ShaderMixinParameters
{
    public static readonly PermutationParameterKey<bool> FastSkyEnabled = ParameterKeys.NewPermutation<bool>(true);
    public static readonly PermutationParameterKey<bool> FastAerialPerspectiveEnabled = ParameterKeys.NewPermutation<bool>(true);
    public static readonly PermutationParameterKey<bool> RenderSunDisk = ParameterKeys.NewPermutation<bool>(true);
    public static readonly PermutationParameterKey<bool> MultiScatteringApproximationEnabled = ParameterKeys.NewPermutation<bool>(true);
};
internal static partial class ShaderMixins
{
    internal partial class AtmosphereRenderSkyRayMarchingEffect  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSource mixin, ShaderMixinContext context)
        {
            context.Mixin(mixin, "AtmosphereRenderSkyRayMarching", context.GetParam(AtmosphereParameters.FastSkyEnabled), context.GetParam(AtmosphereParameters.FastAerialPerspectiveEnabled), context.GetParam(AtmosphereParameters.RenderSunDisk), context.GetParam(AtmosphereParameters.MultiScatteringApproximationEnabled));
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("AtmosphereRenderSkyRayMarchingEffect", new AtmosphereRenderSkyRayMarchingEffect());
        }
    }
}
internal static partial class ShaderMixins
{
    internal partial class AtmosphereRenderTransmittanceLutEffect  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSource mixin, ShaderMixinContext context)
        {
            context.Mixin(mixin, "AtmosphereRenderTransmittanceLut", context.GetParam(AtmosphereParameters.MultiScatteringApproximationEnabled));
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("AtmosphereRenderTransmittanceLutEffect", new AtmosphereRenderTransmittanceLutEffect());
        }
    }
}
internal static partial class ShaderMixins
{
    internal partial class AtmosphereNewMultiScattEffect  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSource mixin, ShaderMixinContext context)
        {
            context.Mixin(mixin, "AtmosphereNewMultiScattCS", context.GetParam(AtmosphereParameters.MultiScatteringApproximationEnabled));
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("AtmosphereNewMultiScattEffect", new AtmosphereNewMultiScattEffect());
        }
    }
}
internal static partial class ShaderMixins
{
    internal partial class AtmosphereRenderSkyViewLutEffect  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSource mixin, ShaderMixinContext context)
        {
            context.Mixin(mixin, "AtmosphereRenderSkyViewLut", context.GetParam(AtmosphereParameters.MultiScatteringApproximationEnabled));
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("AtmosphereRenderSkyViewLutEffect", new AtmosphereRenderSkyViewLutEffect());
        }
    }
}
internal static partial class ShaderMixins
{
    internal partial class AtmosphereRenderScatteringCameraVolumeEffect  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSource mixin, ShaderMixinContext context)
        {
            context.Mixin(mixin, "AtmosphereRenderScatteringCameraVolume", context.GetParam(AtmosphereParameters.MultiScatteringApproximationEnabled));
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("AtmosphereRenderScatteringCameraVolumeEffect", new AtmosphereRenderScatteringCameraVolumeEffect());
        }
    }
}
